"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"symbols-view.js","sourceRoot":"","sources":["../lib/symbols-view.ts"],"names":[],"mappings":"","sourcesContent":["\nimport type { TextEditor, Point, Range as AtomRange } from 'atom';\n\ntype MaybePromise<T> = T | Promise<T>;\n\nexport type SymbolPosition = {\n  // An instance of `Point` describing the symbol's location. The `column`\n  // value of the point may be ignored, depending on the user's settings. At\n  // least one of `position` and `range` must exist.\n  position: Point;\n};\n\nexport type SymbolRange = {\n  // An exact range describing the bounds of a given token. If present, might\n  // be used to highlight the token when selected by the user, though that\n  // depends on the user's settings. At least one of `position` and `range`\n  // must exist.\n  range: AtomRange\n};\n\nexport type SymbolDirectoryAndFile = {\n  // The name of the file that contains the symbol. Will be shown in the UI.\n  file: string,\n  // The path of to the directory of the file that contains the symbol. Should\n  // not contain the file name.\n  directory: string\n};\n\nexport type SymbolPath = {\n  // The full path to the file that contains the symbol.\n  path: string\n};\n\nexport type FileSymbol = (SymbolPosition | SymbolRange) & {\n  // The name of the symbol. This value will be shown in the UI and will be\n  // filtered against if the user types in the text box. Required.\n  name: string,\n\n  // A short name for a symbol. A consumer can choose to display this value in\n  // the UI instead of `name`. This should describe the bare identifier without\n  // any other decoration. If this would be identical to `name`, you may omit\n  // it.\n  shortName?: string,\n\n  // A word representing the symbol in some way. Typically this would describe\n  // the symbol — function, constant, et cetera — but can be used however the\n  // provider sees fit. If present, will be included in the symbol list as a\n  // badge.\n  tag?: string\n\n  // A _short_ string of explanatory text. Optional. Can be used for text that\n  // is contexually significant to the symbol; for instance, a method or field\n  // might describe the class that owns it. Symbol consumers will expect this\n  // field to be short, and will not devote much space to it in the interface,\n  // so this field _should not_ contain unbounded text.\n  //\n  // If this text refers to the name of another symbol, it should match either\n  // `name` or `shortName` of the other symbol. This gives consumers a way to\n  // infer hierarchical relationships.\n  context?: string,\n\n  // A string that represents an icon. This will typically take the form of a\n  // class name that starts with `icon-`, but not always, so be sure to specify\n  // the `icon-` part.\n  //\n  // If the consumer chooses to use the icon when rendering its UI, this string\n  // will be used as a class name. All of the icons provided by Atom's built-in\n  // Octicons will be available; other icons may be available depending on the\n  // user's installed packages and themes.\n  icon?: string,\n\n  // POSSIBLE ENHANCEMENTS (UNIMPLEMENTED!):\n  //\n  // I don't necessarily find these useful myself, or at least not useful\n  // enough to warrant their inclusion in a space-constrained list of symbols,\n  // but some people might want these to be present.\n\n  // A description of the symbol in code or pseudocode. For functions, this\n  // could be a function signature, along with parameter names and (if known)\n  // types.\n  //\n  // This field would receive its own line in a symbol list.\n  signature?: string\n\n  // The literal line of code containing the symbol. A symbol consumer could\n  // try to retrieve this information itself, but some symbol providers would\n  // be able to supply it much more simply.\n  //\n  // This field would receive its own line in a symbol list.\n  source?: string\n};\n\ntype ProjectSymbol = FileSymbol & (SymbolDirectoryAndFile | SymbolPath);\n\nexport type SymbolMeta = {\n  // The type of action being performed:\n  //\n  // * `file`: A symbol search within the current file.\n  // * `project`: A project-wide symbol search.\n  // * `project-find`: A project-wide attempt to resolve a reference based on\n  //    (a) the position of the cursor, (b) the value of the editor's current\n  //    text selection, or (c) whatever word was clicked on in the IDE.\n  type: 'file' | 'project' | 'project-find',\n\n  // The current text editor.\n  editor: TextEditor,\n\n  // The relevant search term, if any.\n  //\n  // When `type` is `project`, this will represent the text that the\n  // user has typed into a search field in order to filter the list of symbols.\n  //\n  // When `type` is `project-find`, this will represent the text that the IDE\n  // wants to resolve.\n  query?: string,\n\n  // An `AbortSignal` that represents whether the user has cancelled the task.\n  // This will happen if the user cancels out of the symbol UI while waiting\n  // for symbols, or if they type a new character in the query field before the\n  // results have returned for the previous typed character.\n  //\n  // If the provider goes async at any point, it should check the signal after\n  // resuming. If the signal has aborted, the provider should immediately\n  // return/resolve with `null` and avoid doing unnecessary further work.\n  signal: AbortSignal,\n\n  // The amount of time, in milliseconds, the provider has before it must\n  // return results. This value is configurable by the user. If the provider\n  // doesn't return anything after this amount of time, it will be ignored.\n  //\n  // This value is given to providers so that they can act wisely when faced\n  // with a choice between “search for more symbols” and “return what we have.”\n  //\n  // The `timeoutMs` property is only present when the appropriate symbol list\n  // UI is not present. Its purpose is to show the UI within a reasonable\n  // amount of time. If the UI is already present — for instance, when\n  // winnowing results in a project-wide symbol search — `timeoutMs` will be\n  // omitted, and the provider can take as much time as it deems appropriate.\n  timeoutMs?: number\n};\n\ntype FileSymbolMeta = SymbolMeta & { type: 'file' };\ntype ProjectSymbolMeta = SymbolMeta & { type: 'project' | 'project-find' };\n\n// Symbol metadata that will be passed to the `canProvideSymbols` method.\nexport type PreliminarySymbolMeta = Omit<SymbolMeta, 'signal'>;\n\nexport interface SymbolProvider {\n  name: string,\n  packageName: string,\n  destroy?(): void,\n\n  // An optional method. If it exists, the main package will register a\n  // callback so that it can clear the cache of this provider's symbols.\n  //\n  // The main package will automatically clear its cache for these reasons:\n  //\n  // * when the main package's config changes (entire cache);\n  // * when any provider is activated or deactivated (single provider's cache);\n  // * when the buffer is modified in any of several ways, including grammar\n  //   change, save, or buffer change (entire cache).\n  //\n  // If your provider may have its cache invalidated for reasons not in this\n  // list, you should implement `onShouldClearCache` and invoke any callback\n  // that registers for it. The `EventEmitter` pattern found throughout Pulsar\n  // is probably how you want to pull this off.\n  onShouldClearCache?(callback: () => TextEditor): void,\n\n  // Whether this provider aims to be the main symbol provider for a given\n  // file. The “exclusive” provider competes with the other workhorse providers\n  // of symbols like `ctags` and Tree-sitter to offer typical symbols like\n  // classes, method names, and the like. A maximum of one exclusive provider\n  // will be chosen for any task, depending on which one scores highest.\n  //\n  // “Supplemental” providers are those that contribute more specialized kinds\n  // of symbols. These providers generally do not compete with exclusive\n  // providers, or with each other, and can add symbols to any exclusive\n  // provider’s results.\n  isExclusive?: boolean,\n\n  // Indicates whether the provider can provide symbols for a given task. Can\n  // return either a boolean or a number; boolean `true` is equivalent to a\n  // score of `1`, and boolean `false` is equivalent to a score of `0`.\n  //\n  // This method receives the same metadata bundle that will be present in the\n  // subsequent call to `getSymbols`. The provider can inspect this metadata\n  // and decide whether it can fulfill the given symbols request.\n  //\n  // Examples:\n  //\n  // * A provider that can analyze the current file, but not the entire\n  //   project, should return `false` for any requests where `type` does not\n  //   equal `file`.\n  // * A provider that works by analyzing code on disk, rather than looking at\n  //   the current unsaved contents of buffers, could return a slightly lower\n  //   score if asked to complete symbols for a file that has been modified.\n  //   This would indicate that it’d be slightly worse than usual candidate.\n  //\n  // Since language server providers will have to ask their servers about\n  // capabilities, this method can go async, though it’s strongly suggested to\n  // keep it synchronous if possible.\n  //\n  // In general, providers are encouraged not to return any scores higher than\n  // `1`, and to allow the user to break ties among providers by choosing their\n  // preferred providers in the package settings.\n  canProvideSymbols(meta: PreliminarySymbolMeta): MaybePromise<boolean | number>,\n\n  // Returns a list of symbols.\n  //\n  // If there are no results, you should return an empty array. If the request\n  // is invalid or cannot be completed — for instance, if the user cancels the\n  // task — you should return `null`.\n  //\n  // This method can go async if needed.\n  getSymbols(meta: FileSymbolMeta): MaybePromise<FileSymbol[] | null>,\n  getSymbols(meta: ProjectSymbolMeta): MaybePromise<ProjectSymbol[] | null>\n}\n"]}